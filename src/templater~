#!/usr/bin/python

from __future__ import with_statement

import sys, os, os.path, codecs

from os.path import join as pjoin
import codecs
import mako.exceptions as exceptions
from functools import partial
from mako.template import Template 
from mako.lookup import TemplateLookup
from mako.runtime import Context
from StringIO import StringIO
from optparse import OptionParser


__all__=[] #export nothing

__author__='Alexander Weigl <alexweigl@gmail.com>'
__date__='2008-12-29'
__version__='1.1.2'
__pname__='templater'
__license__= 'creative commons 3.0 - by-nc-sa <http://creativecommons.org/licenses/by-nc-sa/3.0/de/>'


APP_DIR=os.path.expanduser( '~/.%s' % __pname__)
TPL_DIR=pjoin(APP_DIR,'tpl.d')
TPL_LKUP=TemplateLookup(directories=[APP_DIR,TPL_DIR,'.',
                                     pjoin(sys.prefix,__pname__,'tpl.d') ] ,
                        module_directory=pjoin(APP_DIR,'modules'),
                        output_encoding='utf-8',
                        encoding_errors='replace')

__default_defaultfile="""
# With this file you can set variables that you can use in your 
# programms. You only need to define a variable in this context.
# If you want to like a now variable you can do it!
# 
# In this file reigns python!
#
# i.e. 
from datetime import datetime 
now = datetime.now()
"""


def cfgEnv():
    """
    Configure the script enviroment.
    this is:
     * APP_DIR ($HOME/.templater)
     * TPL_DIR (APP_DIR/tpl.d)
     * defaults file
    """
    try:  
        os.mkdir(APP_DIR) 
    except: pass
    try:  
        os.mkdir(TPL_DIR) 
    except: pass
    
    try:        
        defaults = pjoin(APP_DIR,'defaults')
        if not os.path.exists(defaults):
            print "Create %s" % defaults
            with codecs.open(defaults,'w','utf-8') as file:
                file.write(__default_defaultfile)           
    except e:
        print >> sys.stderr, str(e)
        pass

def processTemplate(name, param):
    """
    Process the template <code>name</code> with the values in <code>param</code> and print out the parsed template.
    """
    if type(param) is not dict: 
        assert('param has to be a dict not %s' % type(param))

    buf = StringIO()

    ctx = Context(buf, **param)
    ctx._data['read']=read
    tpl = TPL_LKUP.get_template(name)
    try:
        tpl.render_context(ctx)        
    except NameError , e :
        print >>sys.stderr, exceptions.text_error_template(TPL_LKUP).render()

    buf.seek(0)
    return  buf.read()
    

def _execfile( globals , file ):    
    if os.path.exists(file):
        execfile(file, globals,   globals )
                                    
def readDefaults():
    values={}
    _execfile(values, pjoin(APP_DIR, "defaults"))
    _execfile(values, pjoin(sys.prefix, __pname__ , "defaults"))
    return values


def show_version():
    print """\
%s - tool for generating documents from templates
Version: %s
Author: %s

License: %s""" % (__pname__, __version__, __author__, __license__) 
    sys.exit(0)
    
def main():
    #parse the CLI options
    options = OptionParser()
    options.add_option('--output','-o', action="store", 
                       help="output file", dest="output")
    options.add_option('--template','-t',  action="store", 
                       help="output file", dest="template")
    options.add_option('-v','--version',  action="store_true", default=False ,
                       help="show program information", dest="version")

    opts, args = options.parse_args()

    if opts.version: show_version()

    #
    cfgEnv()
    
    values = readDefaults()   

    for arg in args:
        k,v=arg.split('=')
        values[k]=v
   

    name = opts.template

    values['template_file'] = opts.template
    
    if name and not name == sys.argv[0]:
        values['output_file'] = opts.output
        s = processTemplate(name, values)        
        if opts.output:

            with codecs.open(opts.output, 'w', 'utf8') as output:
                output.write(s)
        else:
            print s,
    else:
        print >> sys.stderr, "No template file was specified"


if __name__ == '__main__': 
    main()
